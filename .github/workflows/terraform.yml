name: 'Terraform'

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment (dev/staging/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

# Environment variables
env:
  TF_VERSION: 1.5.0
  TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
  TF_ACTION: ${{ github.event.inputs.action || 'plan' }}
  AWS_REGION: 'us-east-1'
  TF_STATE_BUCKET: 'sheily-terraform-state'
  TF_LOCK_TABLE: 'sheily-terraform-locks'
  
  # Application settings
  APP_NAME: 'sheily'
  ENVIRONMENT: ${{ github.event.inputs.environment || 'dev' }}

# Default job configuration
jobs:
  terraform:
    name: 'Terraform ${{ env.TF_ACTION }} on ${{ env.ENVIRONMENT }}'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ env.ENVIRONMENT }}
      url: ${{ format('https://{0}.sheily.example.com', env.ENVIRONMENT) }}
    
    # Set permissions for the job
    permissions:
      contents: read
      pull-requests: write
      id-token: write
      
    # Environment-specific configurations
    strategy:
      matrix:
        # Prevent concurrent runs for the same environment
        include:
          - environment: dev
            auto_approve: true
            tf_vars: 'dev.tfvars'
          - environment: staging
            auto_approve: false
            tf_vars: 'staging.tfvars'
          - environment: prod
            auto_approve: false
            tf_vars: 'prod.tfvars'
      fail-fast: false
      
    # Only run for the specified environment
    if: matrix.environment == env.ENVIRONMENT
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for Git versioning
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        role-duration-seconds: 3600
        
    - name: Setup Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
        
    - name: Terraform Format
      id: fmt
      run: |
        cd terraform
        terraform fmt -check -diff -recursive
        
    - name: Terraform Init
      id: init
      run: |
        cd terraform
        terraform init \
          -input=false \
          -backend-config="bucket=${{ env.TF_STATE_BUCKET }}" \
          -backend-config="key=${{ env.APP_NAME }}/${{ env.ENVIRONMENT }}.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ env.TF_LOCK_TABLE }}" \
          -backend-config="encrypt=true"
          
    - name: Terraform Validate
      id: validate
      run: |
        cd terraform
        terraform validate -no-color
        
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || env.TF_ACTION == 'plan'
      run: |
        cd terraform
        terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
        terraform plan \
          -input=false \
          -var-file=environments/${{ matrix.tf_vars }} \
          -var="environment=${{ env.ENVIRONMENT }}" \
          -out=tfplan
          
    - name: Update Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/tfplan', 'utf8');
          const maxGitHubBodyLength = 65536;
          const planOutput = plan.length > maxGitHubBodyLength
            ? plan.substring(0, maxGitHubBodyLength) + '\n... Output truncated due to length ...'
            : plan;
            
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## Terraform Plan Output\n\n```\n' + planOutput + '\n```'
          });
          
    - name: Terraform Plan Status
      if: github.event_name == 'pull_request'
      run: exit 1
      
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && env.TF_ACTION == 'apply'
      run: |
        cd terraform
        terraform workspace select ${{ env.ENVIRONMENT }} || terraform workspace new ${{ env.ENVIRONMENT }}
        
        # Check if this is a PR merge
        if [ -f "tfplan" ]; then
          terraform apply -auto-approve -input=false tfplan
        else
          terraform apply -auto-approve -input=false \
            -var-file=environments/${{ matrix.tf_vars }} \
            -var="environment=${{ env.ENVIRONMENT }}"
        fi
        
        # Output the web app URL
        echo "web_app_url=$(terraform output -raw web_app_url 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT
        echo "api_url=$(terraform output -raw api_url 2>/dev/null || echo 'Not available')" >> $GITHUB_OUTPUT
        
    - name: Terraform Destroy
      id: destroy
      if: github.ref == 'refs/heads/main' && env.TF_ACTION == 'destroy' && env.ENVIRONMENT != 'prod'
      run: |
        cd terraform
        terraform workspace select ${{ env.ENVIRONMENT }}
        terraform destroy -auto-approve -input=false \
          -var-file=environments/${{ matrix.tf_vars }} \
          -var="environment=${{ env.ENVIRONMENT }}"
          
    - name: Update GitHub Environment URL
      if: github.ref == 'refs/heads/main' && env.TF_ACTION == 'apply'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: env } = await github.rest.actions.getEnvironment({
            repository_id: context.repo.repoId,
            environment_name: '${{ env.ENVIRONMENT }}',
          });
          
          if (env.deployment_branch_policy) {
            await github.rest.actions.updateEnvironment({
              repository_id: context.repo.repoId,
              environment_name: '${{ env.ENVIRONMENT }}',
              wait_timer: 0,
              reviewers: null,
              deployment_branch_policy: null
            });
          }
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.TERRAFORM_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Terraform Format
      id: fmt
      run: |
        cd terraform
        terraform fmt -check
        
    - name: Terraform Init
      id: init
      run: |
        cd terraform
        terraform init \
          -input=false \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="key=sheily/${{ env.TF_WORKSPACE }}.tfstate" \
          -backend-config="region=${{ env.AWS_REGION }}" \
          -backend-config="dynamodb_table=${{ secrets.TF_LOCK_TABLE }}" \
          -backend-config="encrypt=true"
          
    - name: Terraform Validate
      id: validate
      run: |
        cd terraform
        terraform validate -no-color
        
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request' || env.TF_ACTION == 'plan'
      run: |
        cd terraform
        terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}
        terraform plan \
          -input=false \
          -var="environment=${{ env.TF_WORKSPACE }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -out=plan.tfplan
          
    - name: Update Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('terraform/plan.tfplan', 'utf8');
          const maxGitHubBodyLength = 65536;
          const planOutput = plan.length > maxGitHubBodyLength
            ? plan.substring(0, maxGitHubBodyLength) + '\n... Output truncated due to length ...'
            : plan;
            
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '## Terraform Plan Output\n\n```\n' + planOutput + '\n```'
          });
          
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && env.TF_ACTION == 'apply'
      run: |
        cd terraform
        terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}
        terraform apply -auto-approve -input=false plan.tfplan
        
    - name: Terraform Destroy
      if: github.ref == 'refs/heads/main' && env.TF_ACTION == 'destroy' && env.TF_WORKSPACE != 'prod'
      run: |
        cd terraform
        terraform workspace select ${{ env.TF_WORKSPACE }}
        terraform destroy -auto-approve -input=false \
          -var="environment=${{ env.TF_WORKSPACE }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}"
