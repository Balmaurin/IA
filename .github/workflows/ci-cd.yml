name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Global environment variables
env:
  # Application settings
  APP_NAME: sheily
  
  # Version settings
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '15-alpine'

# Job configurations
jobs:
  # Backend testing and validation
  backend:
    name: Backend (Python)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov black flake8 isort mypy bandit safety

    - name: Run Python tests with coverage
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
      run: |
        cd apps/sheily_light_api
        pytest --cov=app --cov-report=xml
        
        # Upload coverage to Codecov if token is available
        if [ -n "${{ secrets.CODECOV_TOKEN }}" ]; then
          bash <(curl -s https://codecov.io/bash) -t ${{ secrets.CODECOV_TOKEN }}
        fi

    - name: Lint with flake8
      run: |
        flake8 apps/sheily_light_api --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 apps/sheily_light_api --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check apps/sheily_light_api

    - name: Check imports with isort
      run: |
        isort --check-only --profile black apps/sheily_light_api

    - name: Run security check with bandit
      run: |
        bandit -r apps/sheily_light_api -x tests

  # Frontend job
  frontend:
    name: Frontend (Node.js)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      working-directory: ./web
      run: npm ci

    - name: Lint
      working-directory: ./web
      run: npm run lint

    - name: Run tests
      working-directory: ./web
      run: npm test -- --watchAll=false --coverage

    - name: Upload coverage to Codecov
      if: ${{ success() && secrets.CODECOV_TOKEN != '' }}
      working-directory: ./web
      run: |
        npm install -g codecov
        codecov -t ${{ secrets.CODECOV_TOKEN }}

  # Build job
  build:
    name: Build
    needs: [backend, frontend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build backend image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.backend
        push: false
        tags: ${{ env.APP_NAME }}-backend:local
    
    - name: Build frontend image
      uses: docker/build-push-action@v4
      with:
        context: ./web
        file: ./web/Dockerfile
        push: false
        tags: ${{ env.APP_NAME }}-frontend:local

  # Deploy application
  deploy:
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://tudominio.com' || 'https://staging.tudominio.com' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Install Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Build frontend
      working-directory: ./web
      run: npm run build
    
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        # Aquí iría el comando para desplegar en producción
        # Por ejemplo, usando SSH, Serverless, o algún otro servicio
        echo "Desplegando en producción..."
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Run deployment script
      if: github.ref == 'refs/heads/develop'
      run: |
        # Aquí iría el comando para desplegar en staging
        echo "Desplegando en staging..."

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        if [ -n "${{ secrets.SSH_HOST }}" ]; then
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        fi

    - name: Deploy to production
      run: |
        # Variables de entorno para el despliegue
        ENV="production"
        REMOTE_DIR="/var/www/sheily"
        
        # Configurar Git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Sincronizar con el servidor
        rsync -avz --delete \
          --exclude '.git' \
          --exclude '.github' \
          --exclude '.env*' \
          --exclude '*.pem' \
          --exclude '*.key' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$REMOTE_DIR/
        
        # Ejecutar comandos en el servidor
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd $REMOTE_DIR && \
          docker-compose -f docker-compose.prod.yml pull && \
          docker-compose -f docker-compose.prod.yml up -d --build && \
          docker system prune -f"

    - name: Verify deployment
      run: |
        if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
          curl -sSf https://${{ secrets.PRODUCTION_URL }}/health
        fi
        
    - name: Notify Slack
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
        SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
        SLACK_TITLE: 'Despliegue ${{ job.status }} - ${{ github.repository }}'
        SLACK_MESSAGE: 'Commit: ${{ github.sha }}\nMensaje: ${{ github.event.head_commit.message }}'
        SLACK_USERNAME: GitHub Actions
        MSG_MINIMAL: true
