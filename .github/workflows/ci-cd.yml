name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Default environment variables
env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  POSTGRES_VERSION: '15-alpine'
  # These can be overridden in the repository's environment secrets

jobs:
  # Trabajo para el backend en Python
  backend:
    name: Backend (Python)
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ vars.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov black flake8 isort mypy bandit safety

    - name: Run Python tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test
      run: |
        if [ -f setup.py ]; then pip install -e .; fi
        if [ -d tests ]; then
          pytest --cov=app --cov-report=xml
          coverage xml
        fi

    - name: Upload coverage to Codecov
      if: success() && github.event_name != 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN || '' }}
        file: ./coverage.xml
        fail_ci_if_error: false

    - name: Lint Python code
      run: |
        if [ -d . ]; then
          black --check .
          flake8 .
          isort --check-only .
          mypy .
        fi

    - name: Security scan Python code
      run: |
        if [ -d . ]; then
          bandit -r . -x tests/
          safety check --full-report
        fi

  # Trabajo para el frontend en Node.js
  frontend:
    name: Frontend (Node.js)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ vars.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Lint
      working-directory: ./web
      run: npm run lint
    
    - name: Check formatting
      working-directory: ./web
      run: npm run format -- --check
    
    - name: Build
      working-directory: ./web
      run: npm run build
    
    - name: Run tests
      working-directory: ./web
      run: |
        if [ -f "jest.config.js" ]; then
          npm test -- --coverage
        fi

  # Despliegue
  deploy:
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://tudominio.com' || 'https://staging.tudominio.com' }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ vars.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Install Node.js ${{ vars.NODE_VERSION }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install frontend dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Build frontend
      working-directory: ./web
      run: npm run build
    
    - name: Deploy to production
      if: github.ref == 'refs/heads/main'
      run: |
        # Aquí iría el comando para desplegar en producción
        # Por ejemplo, usando SSH, Serverless, o algún otro servicio
        echo "Desplegando en producción..."
    
    - name: Deploy to staging
      if: github.ref == 'refs/heads/develop'
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: Run deployment script
      if: github.ref == 'refs/heads/develop'
      run: |
        # Aquí iría el comando para desplegar en staging
        echo "Desplegando en staging..."

    - name: Add known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SSH_HOST || 'example.com' }} >> ~/.ssh/known_hosts

    - name: Deploy to production
      run: |
        # Variables de entorno para el despliegue
        ENV="production"
        REMOTE_DIR="/var/www/sheily"
        
        # Configurar Git
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Sincronizar con el servidor
        rsync -avz --delete \
          --exclude '.git' \
          --exclude '.github' \
          --exclude '.env*' \
          --exclude '*.pem' \
          --exclude '*.key' \
          ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$REMOTE_DIR/
        
        # Ejecutar comandos en el servidor
        ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
          cd $REMOTE_DIR && \
          docker-compose -f docker-compose.prod.yml pull && \
          docker-compose -f docker-compose.prod.yml up -d --build && \
          docker system prune -f"

    - name: Verify deployment
      run: |
        if [ -n "${{ secrets.PRODUCTION_URL }}" ]; then
          curl -sSf https://${{ secrets.PRODUCTION_URL }}/health
        fi
        
    - name: Notify Slack
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL || '' }}
        SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
        SLACK_TITLE: 'Despliegue ${{ job.status }} - ${{ github.repository }}'
        SLACK_MESSAGE: 'Commit: ${{ github.sha }}\nMensaje: ${{ github.event.head_commit.message }}'
        SLACK_USERNAME: GitHub Actions
        MSG_MINIMAL: true
